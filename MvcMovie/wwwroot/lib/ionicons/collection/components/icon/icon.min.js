import{Build,Component,Element,Host,Prop,State,Watch,h}from"@stencil/core";import{getSvgContent,ioniconContent}from"./request";import{getName,getUrl}from"./utils";class Icon{constructor(){this.iconName=null,this.isVisible=!1,this.mode=getIonMode(),this.lazy=!1,this.sanitize=!0}connectedCallback(){this.waitUntilVisible(this.el,"50px",()=>{this.isVisible=!0,this.loadIcon()})}disconnectedCallback(){this.io&&(this.io.disconnect(),this.io=void 0)}waitUntilVisible(e,t,i){if(Build.isBrowser&&this.lazy&&"undefined"!=typeof window&&window.IntersectionObserver){const o=this.io=new window.IntersectionObserver(e=>{e[0].isIntersecting&&(o.disconnect(),this.io=void 0,i())},{rootMargin:t});o.observe(e)}else i()}loadIcon(){if(Build.isBrowser&&this.isVisible){const t=getUrl(this);t&&(ioniconContent.has(t)?this.svgContent=ioniconContent.get(t):getSvgContent(t,this.sanitize).then(()=>this.svgContent=ioniconContent.get(t)))}const e=this.iconName=getName(this.name,this.icon,this.mode,this.ios,this.md);this.ariaLabel||"true"===this.ariaHidden||e&&(this.ariaLabel=e.replace(/\-/g," "))}render(){const{iconName:e}=this;var t=this.mode||"md",i=this.flipRtl||e&&(-1<e.indexOf("arrow")||-1<e.indexOf("chevron"))&&!1!==this.flipRtl;return h(Host,{role:"img",class:Object.assign(Object.assign({[t]:!0},createColorClasses(this.color)),{[`icon-${this.size}`]:!!this.size,"flip-rtl":!!i&&"rtl"===this.el.ownerDocument.dir})},Build.isBrowser&&this.svgContent?h("div",{class:"icon-inner",innerHTML:this.svgContent}):h("div",{class:"icon-inner"}))}static get is(){return"ion-icon"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["icon.css"]}}static get styleUrls(){return{$:["icon.css"]}}static get assetsDirs(){return["svg"]}static get properties(){return{mode:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:"The mode determines which platform styles to use."},attribute:"mode",reflect:!1,defaultValue:"getIonMode()"},color:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:"The color to use for the background of the item."},attribute:"color",reflect:!1},ariaLabel:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:"Specifies the label to use for accessibility. Defaults to the icon name."},attribute:"aria-label",reflect:!0},ariaHidden:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:"Set the icon to hidden, respectively `true`, to remove it from the accessibility tree."},attribute:"aria-hidden",reflect:!0},ios:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:"Specifies which icon to use on `ios` mode."},attribute:"ios",reflect:!1},md:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:"Specifies which icon to use on `md` mode."},attribute:"md",reflect:!1},flipRtl:{type:"boolean",mutable:!1,complexType:{original:"boolean",resolved:"boolean | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:'Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.'},attribute:"flip-rtl",reflect:!1},name:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:"Specifies which icon to use from the built-in set of icons."},attribute:"name",reflect:!1},src:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:"Specifies the exact `src` of an SVG file to use."},attribute:"src",reflect:!1},icon:{type:"any",mutable:!1,complexType:{original:"any",resolved:"any",references:{}},required:!1,optional:!0,docs:{tags:[],text:"A combination of both `name` and `src`. If a `src` url is detected\nit will set the `src` property. Otherwise it assumes it's a built-in named\nSVG and set the `name` property."},attribute:"icon",reflect:!1},size:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string | undefined",references:{}},required:!1,optional:!0,docs:{tags:[],text:'The size of the icon.\nAvailable options are: `"small"` and `"large"`.'},attribute:"size",reflect:!1},lazy:{type:"boolean",mutable:!1,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:"If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\nDefault, `false`."},attribute:"lazy",reflect:!1,defaultValue:"false"},sanitize:{type:"boolean",mutable:!1,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[{text:"true",name:"default"}],text:"When set to `false`, SVG content that is HTTP fetched will not be checked\nif the response SVG content has any `<script>` elements, or any attributes\nthat start with `on`, such as `onclick`."},attribute:"sanitize",reflect:!1,defaultValue:"true"}}}static get states(){return{svgContent:{},isVisible:{}}}static get elementRef(){return"el"}static get watchers(){return[{propName:"name",methodName:"loadIcon"},{propName:"src",methodName:"loadIcon"},{propName:"icon",methodName:"loadIcon"}]}}const getIonMode=()=>Build.isBrowser&&"undefined"!=typeof document&&document.documentElement.getAttribute("mode")||"md",createColorClasses=e=>e?{"ion-color":!0,[`ion-color-${e}`]:!0}:null;export{Icon};